# Nombre del flujo de trabajo, aparecerá en la pestaña "Actions" de GitHub
name: Ejecutar y Reportar Tests de Playwright

# Define cuándo se debe activar este robot.
on:
  # Se activará cada vez que alguien haga "git push" a la rama "main".
  push:
    branches: [ main ]
  # También permite ejecutarlo manualmente desde la web de GitHub.
  workflow_dispatch:

# Define los "trabajos" que debe realizar el robot.
jobs:
  # Nombramos a nuestro trabajo "test". Podemos tener varios trabajos.
  test:
    # El robot creará una máquina virtual con la última versión de Ubuntu.
    runs-on: ubuntu-latest

    # Lista de pasos secuenciales que ejecutará el robot.
    steps:
    # Paso 1: Descargar el código
    - name: 1. Descargar el código del repositorio
      uses: actions/checkout@v4 # "uses" indica que usamos una acción pre-hecha por la comunidad.

    # Paso 2: Configurar Java en la máquina virtual (lo necesita Maven)
    - name: 2. Configurar JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Paso 3: Construir la imagen de Docker (como harías tú localmente)
    - name: 3. Construir la imagen de Docker
      run: docker build -t eldiario-tests .

    # Paso 4: Ejecutar el script de Setup para crear el state.json
    - name: 4. Generar el archivo state.json
      run: docker run --rm -u $(id -u):$(id -g) -v "$(pwd):/app" eldiario-tests mvn compile exec:java -Dexec.mainClass="com.elDiarioTest.setup.Setup"

    # Paso 5: Ejecutar los tests (este ya no debería fallar)
    - name: 5. Limpiar y ejecutar los tests en Docker
      run: |
        mvn clean
        docker run --rm \
          -v "$(pwd)/target:/app/target" \
          -v "$(pwd)/screenshots:/app/screenshots" \
          eldiario-tests

    # Paso 6: Corregir los permisos de los resultados (el mismo problema que tenías tú)
    - name: 6. Corregir permisos de la carpeta target
      run: sudo chown -R $USER:$USER target

    # Paso 7: Generar el reporte estático de Allure (sin levantarlo)
    - name: 7. Generar el reporte de Allure
      run: mvn allure:report # "report" genera los archivos HTML, "serve" levanta el servidor.

    # Paso 8: Guardar el reporte para poder descargarlo
    - name: 8. Subir el reporte de Allure como un artefacto
      uses: actions/upload-artifact@v4
      with:
        name: allure-report # Nombre del archivo ZIP que se podrá descargar
        path: target/site/allure-maven-plugin/ # La carpeta que contiene el reporte HTML
